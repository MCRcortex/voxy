#version 450
#extension GL_ARB_gpu_shader_int64 : enable

#define MESHLET_ACCESS
#define BIND_SAMPLER_AS_HIZ
#import <voxy:lod/quad_format.glsl>
#import <voxy:lod/gl46mesh/bindings.glsl>
#import <voxy:lod/section.glsl>
#import <voxy:lod/gl46mesh/meshlet.glsl>
layout(local_size_x=128) in;

vec3 proj(vec3 pos) {
    vec4 t = MVP * vec4(vec3(pos),1);
    return t.xyz/t.w;
}
bool testHiZ(PosHeader secPos, AABBHeader aabb) {
    ivec3 section = extractPosition(secPos);
    uint detail = extractDetail(secPos);
    vec3 pos = vec3(ivec3(((section<<detail)-baseSectionPos)<<5));
    vec3 cmin = ivec3(extractMin(aabb)*(1<<detail));
    vec3 cmax = ivec3((extractMax(aabb)+1)*(1<<detail));


    //TODO:FIXME: either pos,cmin,cmax isnt correct, aswell as the miplevel isnt correct as its sampling at the wrong detail level

    vec3 minBB = proj(pos + cmin);//
    vec3 maxBB = minBB;

    for (int i = 1; i < 8; i++) {
        vec3 point = proj(pos + mix(cmin, cmax, bvec3((i&1)!=0,(i&2)!=0,(i&4)!=0)));
        minBB = min(minBB, point);
        maxBB = max(maxBB, point);
    }

    minBB = clamp(minBB*0.5+0.5, vec3(0), vec3(1));
    maxBB = clamp(maxBB*0.5+0.5, vec3(0), vec3(1));

    vec2 size = (maxBB.xy - minBB.xy) * vec2(ivec2(screensize));
    float miplevel = ceil(log2(max(max(size.x, size.y),1)));
    /*
    float a = textureLod(hizSampler,minBB.xy,miplevel).r;
    float b = textureLod(hizSampler,vec2(minBB.x,maxBB.y),miplevel).r;
    float c = textureLod(hizSampler,maxBB.xy,miplevel).r;
    float d = textureLod(hizSampler,vec2(maxBB.x,minBB.y),miplevel).r;
    float depth = max(max(a,b),max(c,d));
    return minBB.z <= depth;
    */

    vec2 midpoint = (maxBB.xy + minBB.xy)*0.5;
    return textureLod(hizSampler, vec3(midpoint, minBB.z - 0.000000001), miplevel) > 0.0001;
}


void main() {
    if (gl_GlobalInvocationID.x >= fullMeshletCount) {
        return;
    }
    if (gl_GlobalInvocationID.x == 0) {
        //Setup the state of the drawElementsIndirect command, instanceCount is cleared externally
        drawCmd.count = QUADS_PER_MESHLET*6;
        drawCmd.firstIndex = 0;
        drawCmd.baseVertex = 0;
        drawCmd.baseInstance = fullMeshletCount;//Start at the begining of the newly emitted meshlet array
    }
    uint meshletId = meshlets[gl_GlobalInvocationID.x];
    PosHeader pos   = geometryPool[meshletId*MESHLET_SIZE];
    AABBHeader aabb = geometryPool[meshletId*MESHLET_SIZE+1];

    if (testHiZ(pos, aabb)) {//If didnt cull, insert it back into the stream
        meshlets[atomicAdd(drawCmd.instanceCount, 1)+fullMeshletCount] = meshletId;
    }
}